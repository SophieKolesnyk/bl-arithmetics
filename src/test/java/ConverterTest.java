import org.junit.jupiter.api.Test;
import java.math.BigDecimal;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;

class ConverterTest {

    @Test
    void toBLDigit() {
        BLDigit actual = Converter.toBLDigit("114381625757888867669235779976146612010218296721242362562561842935706935245733897830597123563958705058989075147599290026879543541");
        BLDigit expected = new BLDigit(0, 221, Arrays.asList(425, 423, 421, 417, 416, 415, 414, 413, 410, 407, 405, 402, 401, 400, 399, 398, 397, 395, 392, 390, 389, 386, 385, 384, 382, 378, 377, 374, 371, 370, 368, 364, 362, 361, 360, 358, 355, 354, 353, 352, 348, 346, 345, 344, 342, 339, 338, 333, 331, 325, 322, 320, 316, 315, 314, 312, 311, 308, 306, 305, 304, 303, 301, 300, 299, 298, 296, 293, 292, 290, 289, 288, 286, 284, 283, 282, 278, 277, 270, 269, 268, 267, 265, 263, 262, 259, 258, 257, 255, 251, 250, 249, 248, 247, 245, 243, 242, 241, 238, 232, 230, 228, 226, 225, 221, 220, 215, 213, 212, 210, 206, 204, 202, 201, 200, 197, 196, 193, 192, 191, 190, 185, 181, 178, 176, 175, 172, 171, 170, 168, 165, 163, 161, 159, 158, 157, 156, 155, 154, 150, 149, 147, 143, 142, 140, 139, 138, 136, 134, 133, 131, 130, 129, 128, 126, 122, 118, 117, 116, 115, 113, 111, 110, 106, 104, 103, 101, 100, 99, 97, 95, 94, 93, 92, 91, 89, 88, 86, 85, 83, 78, 77, 75, 74, 71, 69, 66, 64, 63, 61, 58, 55, 54, 52, 51, 50, 46, 45, 41, 38, 34, 32, 31, 30, 28, 26, 24, 23, 22, 21, 17, 15, 14, 13, 11, 7, 6, 5, 4, 2, 0));
        assertEquals(actual.sign, expected.sign);
        assertEquals(actual.Q, expected.Q);
        assertEquals(actual.N, expected.N);
    }

    @Test
    void toBLDigit1() {
        BigDecimal init_dec = new BigDecimal("7888867669");
        BLDigit actual = Converter.toBLDigit(init_dec);
        BLDigit expected = new BLDigit(0, 17, Arrays.asList(32, 31, 30, 28, 26, 25, 21, 20, 18, 17, 15, 12, 8, 6, 4, 2, 0));
        assertEquals(actual.sign, expected.sign);
        assertEquals(actual.Q, expected.Q);
        assertEquals(actual.N, expected.N);
    }

    @Test
    void toBLDigit2() {
        BLDigit actual = Converter.toBLDigit("3816257578888676692357799761466120.1021829672124236256256");
        BLDigit expected = new BLDigit(0, 1166,  Arrays.asList(111, 109, 108, 107, 106, 101, 98, 97, 96, 95, 94, 93, 92, 88, 86, 83, 80, 79, 78, 73, 72, 71, 70, 69, 67, 63, 61, 60, 59, 57, 55, 54, 50, 49, 47, 46, 44, 40, 39, 38, 37, 36, 34, 33, 31, 30, 28, 24, 22, 20, 15, 14, 12, 9, 8, 3, -4, -5, -7, -11, -13, -17, -19, -21, -24, -25, -27, -28, -30, -32, -34, -35, -36, -37, -40, -42, -43, -47, -50, -51, -54, -55, -56, -59, -60, -61, -62, -63, -68, -69, -70, -72, -75, -77, -78, -84, -85, -93, -95, -97, -103, -107, -108, -109, -112, -113, -114, -115, -117, -119, -125, -127, -133, -135, -136, -140, -141, -146, -147, -150, -151, -154, -155, -157, -161, -164, -165, -166, -173, -174, -176, -179, -182, -184, -185, -186, -187, -189, -190, -192, -195, -196, -197, -198, -199, -200, -201, -206, -207, -208, -210, -213, -217, -219, -223, -224, -225, -236, -237, -241, -242, -244, -246, -247, -255, -256, -258, -259, -260, -263, -264, -266, -270, -275, -276, -277, -280, -282, -283, -288, -289, -290, -296, -298, -299, -300, -302, -303, -305, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -324, -328, -330, -332, -333, -337, -338, -339, -341, -342, -343, -346, -347, -348, -349, -350, -351, -357, -358, -359, -360, -362, -364, -367, -368, -370, -373, -375, -376, -377, -379, -381, -386, -389, -390, -392, -398, -399, -400, -402, -403, -404, -405, -411, -413, -415, -416, -418, -422, -428, -429, -431, -432, -433, -434, -436, -438, -439, -441, -443, -445, -447, -449, -450, -451, -452, -454, -456, -457, -460, -463, -466, -469, -473, -477, -480, -481, -484, -486, -487, -488, -490, -492, -493, -495, -496, -503, -505, -507, -508, -510, -511, -512, -514, -516, -521, -522, -524, -526, -531, -533, -535, -540, -544, -546, -547, -549, -551, -552, -558, -562, -566, -568, -571, -573, -574, -575, -579, -580, -581, -585, -586, -589, -591, -596, -597, -599, -600, -605, -607, -608, -613, -615, -616, -617, -618, -619, -620, -629, -630, -631, -632, -634, -638, -639, -640, -643, -644, -648, -650, -653, -654, -655, -656, -657, -658, -659, -660, -661, -663, -664, -665, -669, -671, -673, -674, -678, -679, -681, -682, -683, -685, -687, -689, -690, -691, -693, -694, -695, -698, -702, -706, -707, -708, -709, -710, -712, -713, -716, -719, -720, -723, -725, -727, -728, -730, -732, -733, -734, -736, -737, -738, -741, -744, -745, -747, -748, -749, -750, -752, -753, -754, -761, -762, -763, -764, -765, -768, -769, -770, -776, -777, -778, -780, -783, -784, -785, -786, -790, -792, -795, -798, -799, -802, -805, -806, -807, -808, -809, -811, -812, -814, -815, -816, -818, -820, -822, -826, -827, -829, -832, -833, -836, -838, -839, -842, -843, -844, -846, -849, -850, -851, -852, -853, -855, -856, -857, -858, -864, -866, -868, -869, -871, -874, -876, -877, -878, -880, -881, -882, -883, -885, -886, -887, -889, -891, -892, -894, -895, -897, -898, -899, -901, -902, -905, -906, -908, -910, -913, -914, -915, -916, -917, -919, -924, -926, -927, -932, -935, -937, -939, -941, -942, -946, -948, -949, -950, -951, -954, -955, -956, -958, -960, -961, -962, -965, -967, -968, -970, -971, -972, -974, -975, -979, -981, -982, -983, -991, -993, -995, -997, -998, -1000, -1002, -1010, -1018, -1020, -1021, -1022, -1023, -1025, -1027, -1028, -1029, -1030, -1032, -1033, -1034, -1037, -1039, -1043, -1046, -1047, -1048, -1049, -1052, -1056, -1057, -1059, -1061, -1062, -1063, -1065, -1066, -1069, -1071, -1072, -1073, -1077, -1080, -1082, -1085, -1086, -1087, -1090, -1091, -1093, -1096, -1097, -1099, -1103, -1104, -1108, -1110, -1112, -1114, -1116, -1122, -1124, -1126, -1129, -1133, -1134, -1135, -1141, -1142, -1145, -1146, -1147, -1149, -1152, -1153, -1158, -1160, -1163, -1164, -1165, -1173, -1176, -1177, -1180, -1181, -1183, -1186, -1187, -1188, -1190, -1191, -1192, -1193, -1197, -1200, -1203, -1205, -1206, -1207, -1209, -1211, -1212, -1213, -1216, -1219, -1222, -1223, -1226, -1232, -1233, -1235, -1236, -1238, -1239, -1240, -1241, -1242, -1243, -1245, -1246, -1247, -1249, -1251, -1252, -1253, -1254, -1255, -1256, -1257, -1259, -1260, -1261, -1262, -1264, -1265, -1267, -1269, -1270, -1271, -1273, -1274, -1275, -1276, -1277, -1279, -1282, -1283, -1285, -1286, -1291, -1292, -1294, -1295, -1300, -1301, -1303, -1304, -1306, -1307, -1312, -1313, -1315, -1316, -1322, -1324, -1327, -1328, -1330, -1333, -1336, -1338, -1339, -1340, -1342, -1343, -1344, -1345, -1346, -1347, -1351, -1352, -1356, -1359, -1363, -1366, -1367, -1368, -1370, -1371, -1372, -1378, -1379, -1383, -1384, -1385, -1387, -1389, -1391, -1392, -1394, -1395, -1397, -1401, -1402, -1405, -1406, -1407, -1408, -1409, -1411, -1412, -1413, -1414, -1415, -1416, -1418, -1419, -1423, -1426, -1427, -1430, -1432, -1434, -1435, -1440, -1441, -1442, -1443, -1444, -1445, -1447, -1452, -1458, -1459, -1460, -1461, -1463, -1464, -1469, -1472, -1473, -1479, -1480, -1481, -1484, -1485, -1486, -1489, -1490, -1492, -1496, -1497, -1498, -1499, -1503, -1504, -1508, -1511, -1512, -1513, -1514, -1517, -1519, -1522, -1523, -1524, -1527, -1528, -1530, -1531, -1532, -1534, -1535, -1537, -1538, -1539, -1540, -1542, -1544, -1545, -1546, -1547, -1548, -1549, -1550, -1551, -1553, -1554, -1557, -1559, -1560, -1562, -1564, -1566, -1567, -1568, -1569, -1570, -1571, -1573, -1576, -1577, -1578, -1579, -1581, -1585, -1588, -1590, -1592, -1593, -1598, -1602, -1606, -1610, -1614, -1619, -1621, -1624, -1625, -1626, -1627, -1628, -1633, -1635, -1637, -1639, -1642, -1647, -1650, -1652, -1653, -1654, -1661, -1662, -1666, -1669, -1671, -1672, -1673, -1676, -1678, -1679, -1683, -1684, -1686, -1688, -1690, -1692, -1693, -1694, -1696, -1700, -1701, -1708, -1709, -1710, -1712, -1713, -1714, -1718, -1721, -1724, -1725, -1726, -1727, -1731, -1733, -1734, -1735, -1736, -1738, -1739, -1742, -1744, -1746, -1747, -1748, -1750, -1751, -1753, -1754, -1755, -1757, -1758, -1759, -1760, -1761, -1762, -1763, -1764, -1765, -1770, -1772, -1774, -1778, -1779, -1780, -1782, -1784, -1786, -1787, -1788, -1791, -1793, -1794, -1795, -1796, -1798, -1799, -1801, -1802, -1807, -1812, -1814, -1815, -1816, -1817, -1818, -1819, -1820, -1821, -1822, -1827, -1829, -1831, -1833, -1834, -1836, -1837, -1840, -1843, -1844, -1845, -1846, -1849, -1850, -1852, -1853, -1857, -1858, -1860, -1862, -1863, -1865, -1866, -1870, -1871, -1873, -1874, -1879, -1880, -1881, -1883, -1888, -1891, -1894, -1895, -1897, -1900, -1901, -1902, -1905, -1906, -1910, -1911, -1914, -1917, -1918, -1922, -1924, -1925, -1928, -1929, -1930, -1933, -1938, -1939, -1941, -1942, -1943, -1944, -1949, -1951, -1953, -1956, -1957, -1959, -1962, -1966, -1967, -1968, -1970, -1977, -1981, -1982, -1983, -1984, -1987, -1989, -1992, -1995, -1999, -2000, -2005, -2006, -2007, -2008, -2009, -2013, -2016, -2019, -2022, -2023, -2024, -2027, -2028, -2033, -2034, -2035, -2038, -2042, -2043, -2044, -2045, -2051, -2053, -2054, -2058, -2060, -2062, -2063, -2066, -2067, -2068, -2069, -2071, -2073, -2075, -2076, -2078, -2079, -2081, -2083, -2085, -2093, -2094, -2096, -2097, -2098, -2099, -2100, -2101, -2102, -2108, -2110, -2111, -2112, -2114, -2115, -2118, -2119, -2123, -2124, -2127, -2130, -2133, -2135, -2136, -2140, -2141, -2144, -2145, -2146, -2149, -2150, -2151, -2152, -2156, -2158, -2159, -2161, -2162, -2164, -2165, -2166, -2169, -2173, -2177, -2178, -2179, -2182, -2184, -2186, -2189, -2190, -2191, -2192, -2194, -2199, -2202, -2203, -2205, -2207, -2211, -2216, -2217, -2220, -2221, -2224, -2225, -2226, -2229, -2230, -2232, -2233, -2234, -2235, -2237, -2239, -2240, -2241, -2243, -2245, -2246, -2247, -2248, -2252, -2253
        ));
        assertEquals(actual.sign, expected.sign);
        assertEquals(actual.Q, expected.Q);
        assertEquals(actual.N, expected.N);
    }

    @Test
    void toDecimal() {
        BigDecimal actual = Converter.toDecimal(new BLDigit(0, 205, Arrays.asList(426, 422, 416, 409, 407, 405, 401, 400, 397, 395, 394, 393, 391, 390, 384, 383, 382, 380, 379, 377, 373, 372, 371, 366, 364, 363, 361, 358, 354, 353, 352, 347, 346, 344, 343, 342, 337, 336, 328, 326, 325, 323, 322, 320, 318, 317, 314, 309, 306, 302, 300, 299, 297, 296, 295, 293, 292, 290, 287, 286, 285, 284, 278, 277, 275, 273, 272, 270, 268, 267, 265, 263, 262, 260, 253, 252, 248, 246, 245, 243, 241, 239, 238, 237, 236, 233, 231, 229, 227, 225, 224, 223, 221, 220, 219, 218, 217, 215, 214, 213, 211, 210, 209, 208, 207, 206, 205, 202, 200, 198, 196, 195, 192, 191, 189, 187, 186, 185, 181, 177, 174, 173, 171, 169, 166, 165, 163, 162, 160, 158, 156, 155, 153, 152, 148, 147, 146, 145, 144, 143, 138, 137, 135, 134, 133, 130, 127, 125, 123, 122, 120, 119, 118, 116, 114, 112, 111, 109, 108, 107, 105, 102, 99, 97, 95, 94, 88, 86, 81, 79, 78, 77, 74, 71, 69, 68, 67, 64, 61, 60, 57, 56, 54, 53, 50, 48, 46, 45, 41, 40, 39, 37, 35, 32, 31, 29, 23, 22, 21, 20, 19, 16, 14, 12, 10)));
        BigDecimal expected = new BigDecimal("184293570693524573389783059712356395870505898907514759929002687954354111438162575788886766923577997614661201021829672124236256256");
        assertEquals(actual, expected);
    }

}