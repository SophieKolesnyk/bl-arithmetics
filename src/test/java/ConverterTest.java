import org.junit.jupiter.api.Test;
import java.math.BigDecimal;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;

class ConverterTest {
//precision = 60
    @Test
    void toBLDigit() {
        BLDigit actual = Converter.toBLDigit("114381625757888867669235779976146612010218296721242362562561842935706935245733897830597123563958705058989075147599290026879543541");
        BLDigit expected = new BLDigit(0, 221, Arrays.asList(425, 423, 421, 417, 416, 415, 414, 413, 410, 407, 405, 402, 401, 400, 399, 398, 397, 395, 392, 390, 389, 386, 385, 384, 382, 378, 377, 374, 371, 370, 368, 364, 362, 361, 360, 358, 355, 354, 353, 352, 348, 346, 345, 344, 342, 339, 338, 333, 331, 325, 322, 320, 316, 315, 314, 312, 311, 308, 306, 305, 304, 303, 301, 300, 299, 298, 296, 293, 292, 290, 289, 288, 286, 284, 283, 282, 278, 277, 270, 269, 268, 267, 265, 263, 262, 259, 258, 257, 255, 251, 250, 249, 248, 247, 245, 243, 242, 241, 238, 232, 230, 228, 226, 225, 221, 220, 215, 213, 212, 210, 206, 204, 202, 201, 200, 197, 196, 193, 192, 191, 190, 185, 181, 178, 176, 175, 172, 171, 170, 168, 165, 163, 161, 159, 158, 157, 156, 155, 154, 150, 149, 147, 143, 142, 140, 139, 138, 136, 134, 133, 131, 130, 129, 128, 126, 122, 118, 117, 116, 115, 113, 111, 110, 106, 104, 103, 101, 100, 99, 97, 95, 94, 93, 92, 91, 89, 88, 86, 85, 83, 78, 77, 75, 74, 71, 69, 66, 64, 63, 61, 58, 55, 54, 52, 51, 50, 46, 45, 41, 38, 34, 32, 31, 30, 28, 26, 24, 23, 22, 21, 17, 15, 14, 13, 11, 7, 6, 5, 4, 2, 0));
        assertEquals(actual.sign, expected.sign);
        assertEquals(actual.Q, expected.Q);
        assertEquals(actual.N, expected.N);
    }

    @Test
    void toBLDigit1() {
        BLDigit actual = Converter.toBLDigit("7888867669");
        BLDigit expected = new BLDigit(0, 17, Arrays.asList(32, 31, 30, 28, 26, 25, 21, 20, 18, 17, 15, 12, 8, 6, 4, 2, 0));
        assertEquals(actual.sign, expected.sign);
        assertEquals(actual.Q, expected.Q);
        assertEquals(actual.N, expected.N);
    }

    @Test
    void toBLDigit2() {
        BLDigit actual = Converter.toBLDigit("3816257578888676692357799761466120.1021829672124236256256");
        System.out.println(actual);
        BLDigit expected = new BLDigit(0, 691, Arrays.asList(111, 109, 108, 107, 106, 101, 98, 97, 96, 95, 94, 93, 92, 88, 86, 83, 80, 79, 78, 73, 72, 71, 70, 69, 67, 63, 61, 60, 59, 57, 55, 54, 50, 49, 47, 46, 44, 40, 39, 38, 37, 36, 34, 33, 31, 30, 28, 24, 22, 20, 15, 14, 12, 9, 8, 3, -4, -5, -7, -11, -13, -17, -19, -21, -24, -25, -27, -28, -30, -32, -34, -35, -36, -37, -40, -42, -43, -47, -50, -51, -54, -55, -56, -59, -63, -66, -67, -71, -75, -77, -78, -80, -85, -86, -87, -88, -95, -96, -97, -99, -101, -109, -110, -111, -114, -115, -116, -117, -118, -120, -121, -122, -123, -124, -125, -126, -127, -129, -133, -134, -137, -138, -139, -144, -148, -150, -151, -152, -153, -155, -156, -159, -161, -166, -168, -169, -170, -172, -175, -179, -180, -181, -184, -186, -187, -189, -192, -195, -196, -197, -201, -203, -208, -213, -214, -218, -220, -223, -225, -227, -232, -233, -234, -236, -238, -239, -244, -245, -248, -250, -254, -258, -261, -265, -267, -269, -275, -277, -279, -280, -282, -283, -286, -288, -289, -290, -291, -292, -293, -294, -297, -299, -300, -306, -308, -312, -319, -321, -322, -324, -329, -333, -337, -338, -339, -340, -341, -343, -344, -346, -347, -348, -352, -354, -360, -363, -364, -367, -368, -369, -370, -374, -375, -376, -382, -384, -386, -388, -393, -395, -397, -398, -400, -404, -405, -408, -409, -412, -414, -415, -416, -418, -419, -424, -426, -427, -429, -430, -433, -436, -437, -438, -443, -447, -448, -450, -451, -453, -455, -462, -466, -467, -468, -470, -472, -473, -474, -476, -477, -478, -479, -480, -481, -483, -487, -488, -489, -492, -493, -497, -498, -500, -502, -507, -510, -514, -515, -516, -517, -518, -519, -520, -521, -522, -523, -529, -531, -533, -535, -537, -539, -542, -543, -550, -551, -553, -554, -558, -560, -563, -566, -567, -570, -571, -572, -573, -574, -578, -581, -584, -586, -590, -593, -594, -598, -599, -601, -605, -608, -609, -614, -615, -619, -622, -624, -625, -626, -631, -632, -633, -635, -636, -637, -638, -639, -640, -645, -647, -648, -650, -651, -653, -655, -657, -659, -662, -663, -664, -665, -669, -675, -676, -677, -678, -680, -681, -683, -685, -686, -688, -689, -691, -693, -698, -702, -704, -706, -709, -710, -713, -719, -721, -722, -724, -725, -727, -730, -731, -734, -735, -737, -739, -744, -746, -748, -750, -754, -755, -756, -757, -758, -761, -763, -765, -768, -769, -770, -772, -773, -776, -779, -780, -782, -783, -784, -786, -788, -798, -800, -803, -805, -809, -810, -811, -813, -816, -817, -822, -823, -824, -827, -828, -829, -830, -831, -832, -834, -835, -840, -841, -843, -846, -847, -850, -852, -853, -854, -858, -861, -862, -867, -868, -870, -871, -872, -875, -878, -879, -882, -885, -886, -889, -895, -896, -897, -899, -900, -902, -906, -907, -908, -909, -910, -911, -912, -913, -915, -916, -918, -919, -920, -925, -934, -936, -938, -939, -942, -943, -946, -947, -948, -949, -950, -954, -955, -956, -957, -963, -964, -966, -968, -969, -970, -972, -978, -979, -982, -984, -985, -987, -988, -989, -990, -991, -994, -995, -998, -1001, -1003, -1005, -1006, -1007, -1009, -1011, -1014, -1015, -1016, -1017, -1020, -1022, -1024, -1027, -1029, -1030, -1031, -1037, -1039, -1041, -1042, -1048, -1049, -1051, -1052, -1055, -1058, -1059, -1060, -1061, -1063, -1066, -1068, -1069, -1073, -1074, -1075, -1076, -1078, -1079, -1080, -1081, -1084, -1088, -1089, -1090, -1091, -1093, -1095, -1096, -1098, -1102, -1107, -1110, -1114, -1117, -1120, -1124, -1130, -1132, -1133, -1137, -1138, -1141, -1142, -1144, -1145, -1148, -1152, -1154, -1155, -1159, -1163, -1168, -1169, -1170, -1171, -1174, -1175, -1176, -1177, -1179, -1182, -1183, -1186, -1188, -1189, -1191, -1202, -1203, -1204, -1205, -1206, -1207, -1208, -1212, -1213, -1214, -1218, -1219, -1221, -1224, -1226, -1228, -1229, -1230, -1231, -1233, -1235, -1236, -1237, -1238, -1239, -1241, -1242, -1243, -1244, -1245, -1246, -1249, -1250, -1254, -1256, -1257, -1258, -1260, -1262, -1269, -1271, -1272, -1273, -1274, -1275, -1276, -1277, -1278, -1282, -1285, -1287, -1289, -1290, -1291, -1292, -1294, -1295, -1297, -1298, -1299, -1303, -1304, -1306, -1307, -1308, -1310, -1312, -1313, -1317, -1318, -1319, -1322, -1324, -1326, -1327, -1329, -1336, -1337, -1339, -1342, -1348, -1350, -1351, -1354, -1355));
        System.out.println(expected);
        assertEquals(actual.sign, expected.sign);
        assertEquals(actual.Q, expected.Q);
        assertEquals(actual.N, expected.N);
    }

    @Test
    void toDecimal() {
        BigDecimal actual = Converter.toDecimal(new BLDigit(0, 205, Arrays.asList(426, 422, 416, 409, 407, 405, 401, 400, 397, 395, 394, 393, 391, 390, 384, 383, 382, 380, 379, 377, 373, 372, 371, 366, 364, 363, 361, 358, 354, 353, 352, 347, 346, 344, 343, 342, 337, 336, 328, 326, 325, 323, 322, 320, 318, 317, 314, 309, 306, 302, 300, 299, 297, 296, 295, 293, 292, 290, 287, 286, 285, 284, 278, 277, 275, 273, 272, 270, 268, 267, 265, 263, 262, 260, 253, 252, 248, 246, 245, 243, 241, 239, 238, 237, 236, 233, 231, 229, 227, 225, 224, 223, 221, 220, 219, 218, 217, 215, 214, 213, 211, 210, 209, 208, 207, 206, 205, 202, 200, 198, 196, 195, 192, 191, 189, 187, 186, 185, 181, 177, 174, 173, 171, 169, 166, 165, 163, 162, 160, 158, 156, 155, 153, 152, 148, 147, 146, 145, 144, 143, 138, 137, 135, 134, 133, 130, 127, 125, 123, 122, 120, 119, 118, 116, 114, 112, 111, 109, 108, 107, 105, 102, 99, 97, 95, 94, 88, 86, 81, 79, 78, 77, 74, 71, 69, 68, 67, 64, 61, 60, 57, 56, 54, 53, 50, 48, 46, 45, 41, 40, 39, 37, 35, 32, 31, 29, 23, 22, 21, 20, 19, 16, 14, 12, 10)));
        BigDecimal expected = new BigDecimal("184293570693524573389783059712356395870505898907514759929002687954354111438162575788886766923577997614661201021829672124236256256");
        assertEquals(actual, expected);
    }

}